# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type CategoriePrime {
  id: ID!
  nom: String
  description: String
}

type Periode {
  id: ID!
  nom: String
  description: String
  datePeriode: DateTime
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type CategorieRetenu {
  id: ID!
  nom: String
  description: String
  type: String
}

type Retenue {
  id: ID!
  nom: String
  description: String
  montant: Float!
}

type PaySalary {
  id: ID!
  moisPaie: String
  montant: Float!
  personnelid: ID!
}

type RetenuPersonnel {
  id: ID!
  startMonth: String
  retenueid: ID!
  personnelid: ID!
}

type Salaire {
  id: ID!
  jourPaie: String
  moisPaie: String
  payer: Boolean!
  montant: Float!
  personnelid: ID!
  personnelFirstName: ID
  personnelLastName: ID
  personnelFonction: ID
}

type PrimePersonnel {
  id: ID!
  startMonth: String
  primeid: ID!
  personnelid: ID!
}

type Prime {
  id: ID!
  nom: String
  description: String
  montant: Float!
}

type SalaireBase {
  id: ID!
  description: String
  montant: Float!
}

type CategoriePersonnel {
  id: ID!
  nom: String
  description: String
  montant: Float!
  primeid: ID!
  retenuid: ID!
}

type ReductionScolarite {
  id: ID!
  name: String
  description: String
  montant: Float!
  pourcentage: Float!
}

type CategorieEleve {
  id: ID!
  nom: String
  description: String
  reductionScolariteid: ID!
}

type AvanceInscription {
  id: ID!
  name: String
  description: String
  paiementDate: DateTime!
  dateLine: DateTime
  montant: Float!
  complete: Boolean!
  reste: Float!
}

type FraisInscription {
  id: ID!
  nameFraisInscription: String
  montant: Float!
}

type Inscription {
  id: ID!
  name: String
  description: String
  dateLine: String
  complete: Boolean!
  montant: Float!
  reste: Float!
}

type Localisation {
  id: ID!
  ville: String
  region: String
  pays: String
  quartier: String
  longitude: Float!
  latitude: Float!
  bp: String
}

type Parent {
  id: ID!
  firstname: String
  lastname: String
  profession: String
  email: String
  phonenumber: String
  gender: String
  parentStatus: String
  childNumber: Float!
}

type ParentStudent {
  id: ID!
  tuteur: Boolean!
  childNumber: Float!
  parentid: ID!
  parentTel: String!
  studentid: ID!
}

type Pension {
  id: ID!
  name: String
  year: String
  description: String
  montantPension: Float!
  complete: Boolean!
  reste: Float!
  surplus: Float!
  dateLine: DateTime
  yearid: ID!
  studentid: ID!
}

type AvanceTranche {
  id: ID!
  name: String
  description: String
  dateLine: DateTime
  year: String
  montant: Float!
  reste: Float!
  complete: Boolean!
  studentid: ID!
  trancheid: ID!
}

type PensionSalle {
  id: ID!
  name: String
  description: String
  montantPension: Float!
  dateLine: DateTime
  yearid: ID!
  yearName: ID!
  salleId: ID!
  salleName: ID
}

type Tranche {
  id: ID!
  name: String
  description: String
  dateLine: DateTime
  montant: Float
  priority: Float
  year: String
  salleid: ID
}

type TrancheStudent {
  id: ID!
  name: String
  year: String
  description: String
  montant: Float
  complete: Boolean!
  reste: Float!
  surplus: Float!
  studentid: ID!
  trancheid: ID!
}

type Student {
  id: ID!
  matricule: String
  firstname: String
  lastname: String
  dateOfBirth: String
  birthPlace: String
  repeating: String!
  sex: String
  adress: String
  fatherFirstName: String
  fatherLastName: String
  fatherPhoneNumber: String
  fatherProfession: String
  motherFirstName: String
  motherLastName: String!
  motherPhoneNumber: String
  motherProfession: String
  tutorFirstName: String
  tutorLastName: String
  tutorPhoneNumber: String
  tutorProfession: String
  salleid: ID!
  salleName: ID
  categorieid: ID!
  categoryName: ID
  parentTel: String!
}

type Expense {
  id: ID!
  creditamount: Float
  debitamount: Float
  debitTotal: Float
  creditTotal: Float
  createdOn: String!
  personnelid: ID
  personnelFirstName: ID
  personnelLastName: ID
  personnelFonction: ID
  studentid: ID
  studentFirstname: ID
  studentLastname: ID
}

type Parameter {
  id: ID!
  parameterName: String
  postalBox: String
  phoneNumber: String
  emailAddress: String
  contry: String
  schoolCurrency: String
  year: String
  anneeAcademiqueId: ID
  anneeAcademiqueName: ID
}

type AnneeAccademique {
  id: ID!
  name: String
  description: String
}

type FraisExamen {
  id: ID!
  description: String
  montant: Float!
  dateLine: DateTime
}

type Section {
  id: ID!
  name: String
  description: String
}

type Cycle {
  id: ID!
  name: String
  sectionid: ID!
  sectionName: ID!
}

type NiveauEtude {
  id: ID!
  name: String
  description: String
  montantPension: Float
  cycleId: ID
  cycleName: ID
}

type Course {
  id: ID!
  title: String
  time: Float
}

type PersonnelSalle {
  id: ID!
  personnelId: ID
  personnelFirstName: ID
  personnelLastName: ID
  personnelFunction: ID
  salleId: ID
  salleName: ID
  courseId: ID
  courseName: ID
}

type Salle {
  id: ID!
  name: String
  section: String
  montantPensionSalle: Float
  effectif: Float
  levelId: ID
  levelName: ID
}

type Personnel {
  id: ID!
  firstName: String!
  lastName: String!
  phoneNumber: String!
  situationMatrimonial: String!
  sexe: String!
  fonction: String
  status: String!
  dateOfStartWork: String!
  dateOfBirth: String!
  childNumber: Float!
}

type User {
  id: ID!
  email: String
  password: String
  firstName: String
  lastName: String
  name: String
  role: Role
  phoneNumber: String
  active: Boolean
  lastConnection: DateTime
  deactivatedAt: DateTime
  personnelid: ID
  studentid: ID
}

enum Role {
  ADMIN
  ENSEIGNANT
  ECONOME
  FONDATEUR
  PRINCIPAL
  GESTIONNAIRE
}

type UserPaginatedResponse {
  items: [User!]!
  total: Int!
  hasMore: Boolean!
}

type StudentPaginatedResponse {
  items: [Student!]!
  total: Int!
  hasMore: Boolean!
}

type ClassStatistics {
  sectionName: String!
  className: String!
  numberOfStudents: Float!
  expectedAmount: Float!
  sumAmountAlreadyPaid: Float!
  rateT: Float!
  amountRest: Float!
  rateZ: Float!
}

type TOTAL {
  TOTAL_EFFECTIFS_ENREGISTRES: Float!
  TOTAL_MONTANT_ATTENDU: Float!
  TOTAL_MONTANT_EN_CAISSE: Float!
  TOTAL_TAUX_ENCAISSEMENT: Float!
  TOTAL_RESTE_A_RECOUVRER: Float!
  TAUX_RAR: Float!
}

type TOTALTABLEONE {
  TOTAL_EFFECTIFS_ENREGISTRES: Float!
  TOTAL_MONTANT_ATTENDU: Float!
  TOTAL_NOMBRE_ENCAISSEMENT: Float!
  TOTAL_NOMBRE_SANS_ENCAISSEMENT: Float!
  TOTAL_MONTANT_EN_CAISSE: Float!
  TOTAL_FIRST_TAUX_ENCAISSEMENT: Float!
  TOTAL_SECOND_TAUX_ENCAISSEMENT: Float!
  TOTAL_RESTE_A_RECOUVRER: Float!
  TOTAL_FIRST_TAUX_RECOUVRIR: Float!
  TOTAL_SECOND_TAUX_RECOUVRIR: Float!
}

type TrancheStat {
  studentid: String!
  Nom: String!
  Priority: Float!
  Rest: Float!
}

type TOTALTABLETWO {
  MONTANT_ATTENDU: Float!
  MONTANT_EN_CAISSE: Float!
  TAUX_ENCAISSEMENT: Float!
  RESTE_RECOUVRER: Float!
  TAUX_RAR: Float!
}

type AvanceTranchePaginatedResponse {
  items: [AvanceTranche!]!
  total: Int!
  hasMore: Boolean!
}

type PensionPaginatedResponse {
  items: [Pension!]!
  total: Int!
  hasMore: Boolean!
}

type ExpensePaginatedResponse {
  items: [Expense!]!
  total: Int!
  hasMore: Boolean!
}

type PersonnelPaginatedResponse {
  items: [Personnel!]!
  total: Int!
  hasMore: Boolean!
}

type PrimePersonnelPaginatedResponse {
  items: [PrimePersonnel!]!
  total: Int!
  hasMore: Boolean!
}

type RetenuPersonnelPaginatedResponse {
  items: [RetenuPersonnel!]!
  total: Int!
  hasMore: Boolean!
}

type PaySalaryPaginatedResponse {
  items: [PaySalary!]!
  total: Int!
  hasMore: Boolean!
}

type SalairePaginatedResponse {
  items: [Salaire!]!
  total: Int!
  hasMore: Boolean!
}

type TrancheStudentPaginatedResponse {
  items: [TrancheStudent!]!
  total: Int!
  hasMore: Boolean!
}

type SectionCycle {
  id: ID!
  description: String
  cycleid: ID!
  sectionid: ID!
}

type LoginResponse {
  access_token: String!
  user: User!
}

type SectionStatistics {
  sectionName: String!
  className: String!
  numberOfStudents: Float!
  numberOfStudentsStartedPaying: Float!
  expectedAmount: Float!
  numberOfStudentsCompletedFee: Float!
  TAUXA: Float!
  sumAmountAlreadyPaid: Float!
  TAUXB: Float!
  numberOfStudentsNotPaid: Float!
  TAUXC: Float!
  amountRest: Float!
  TAUXD: Float!
}

type StudentStatistics {
  name: String!
  matricle: String!
  section: String!
  amountExpected: Float!
  amountPaid: Float!
  collectionRate: Float!
  restToPay: Float!
  rateArrears: Float!
}

type SpecialStudentStatistics {
  amountToPay: Float!
  dateLine: DateTime!
  categorie: String!
  nameTranche: String!
  restOfAmountToPay: Float!
  amountAlreadyPaid: Float!
  paymentDate: DateTime!
  studentFirstName: String!
  studentLastName: String!
  studentPhoneNumber: String!
  paymentPriority: Float!
}

type Query {
  findAlluser: [User!]!
  user(id: String!): User!
  pagiantionResponseUser(pagination: PaginationInput!): UserPaginatedResponse!
  getAllEmails: [String!]!
  findAllPersonnelSalle: [PersonnelSalle!]!
  findOnePersonnelSalle(id: String!): PersonnelSalle!
  findbyCoursePersonnelSalle(personnelid: String!, salleid: String!, courseid: String!): [[String!]!]!
  pagiantionResponseStudent(pagination: PaginationInput!): StudentPaginatedResponse!
  findAllstudents: [Student!]!
  findOnestudent(id: String!): Student!
  getAllStudentsForUseAnglophone: [Student!]!
  AmountrExpectedByTranche(studentid: String!): [Float!]!
  getClassfeebyStudent(studentid: String!): Float!
  getClassfeeofStudent(studentid: String!): [Tranche!]!
  getAllForUseAnglophoneStudent: [Student!]!
  findAlllocalistaion: [Localisation!]!
  localisation(id: String!): Localisation!
  findAllcategorieeleve: [CategorieEleve!]!
  findOneCategorieeleve(id: String!): CategorieEleve!
  findAllreductionscolarite: [ReductionScolarite!]!
  primePersonnel(id: String!): PrimePersonnel!
  findAlltranche: [Tranche!]!
  tranche(id: String!): Tranche!
  findByStudentRestTranche(studentid: String!): [TrancheStat!]!
  findAllparameters: [Parameter!]!
  findOneparameters(id: String!): Parameter!
  findAlltranchestudent: [TrancheStudent!]!
  trancheStudent(id: String!): TrancheStudent!
  getStudentByTrancheStudent(studentid: String!): TrancheStudent!
  pagiantionResponseTrancheStudent(pagination: PaginationInput!): TrancheStudentPaginatedResponse!
  getTranchestudentPaymentDate(studentid: String!, trancheid: String!): DateTime!
  getTrancheDateLineByStudent(studentid: String!, trancheid: String!): DateTime!
  findAllpensionSalle: [PensionSalle!]!
  findOnepensionsalle(id: String!): PensionSalle!
  findAllAnnerAccademique: [AnneeAccademique!]!
  anneeAccademique(id: String!): AnneeAccademique!
  findAllsalle: [Salle!]!
  findOnesalle(id: String!): Salle!
  etatInscriptionSalle(id: String!): Salle!
  findSalleByStudent(studentid: String!): Salle!
  salleAnglophoneSection: [Salle!]!
  NumberofStudentsSalleAnglophoneSection: Float!
  findSectionByStudent(studentid: String!): [Section!]!
  findAllNiveauEtude: [NiveauEtude!]!
  findOneNiveauEtude(id: String!): NiveauEtude!
  etatInscriptionNiveau(id: String!): NiveauEtude!
  findAllsectioncycle: [SectionCycle!]!
  sectionCycle(id: String!): SectionCycle!
  etatInscription(id: String!): SectionCycle!
  findAllsection: [Section!]!
  findOnesection(id: String!): Section!
  getAllForUseAnglophone: [Section!]!
  getAllForUseFrancophone: [Section!]!
  findAllcycle: [Cycle!]!
  findOnecycle(id: String!): Cycle!
  findavancetranchebyid(input: String!): AvanceTranche!
  findallavancetranche: [AvanceTranche!]!
  SumAvanceTrancheByTranche(trancheid: String!): Float!
  AmountMostRecentAvanceTranche(trancheid: String!): Float!
  MostRecentAvanceTranche: Float!
  AmountRecentAvanceTrancheByStudent(studentid: String!): Float!
  SumAvanceTrancheByStudent(studentid: String!, trancheid: String!): Float!
  getallfessalreadypayed(studentid: String!): [Tranche!]!
  getalltranchecompletedbystudent(studentid: String!): [Tranche!]!
  RestTuitionFeebystudent(studentid: String!): [Tranche!]!
  pagiantionResponseAvanceTranche(pagination: PaginationInput!): AvanceTranchePaginatedResponse!
  pagiantionResponsePension(pagination: PaginationInput!): PensionPaginatedResponse!
  findAllpension: [Pension!]!
  pension(id: String!): Pension!
  findrestpensionbystudent(studentid: String!): Float!
  findpensionbystudent(studentid: String!): Pension!
  pagiantionResponseExpense(pagination: PaginationInput!): ExpensePaginatedResponse!
  findoneexpense(id: String!): Expense!
  findallexpenses: [Expense!]!
  findallpaysalaire: [PaySalary!]!
  getonepaysalaire(id: String!): PaySalary!
  PersonnelMonthPaySalary(personnelid: String!): [String!]!
  pagiantionResponsePaySalary(pagination: PaginationInput!): PaySalaryPaginatedResponse!
  getpaysalairebypersonnel(personnelid: String!): [PaySalary!]!
  findAllretenupersonnel: [RetenuPersonnel!]!
  pagiantionResponseRetenuPersonnel(pagination: PaginationInput!): RetenuPersonnelPaginatedResponse!
  retenuPersonnel(id: String!): RetenuPersonnel!
  findmontantretenubypersonnel(personnelid: String!): [Float!]!
  findnamesretenubypersonnel(personnelid: String!): [String!]!
  findsumallretenupersonnel(personnelid: String!): Float!
  getRetenuEtNom(personnelid: String!): [[String!]!]!
  getallretenupersonnelbymonth(personnelid: String!, month: String!): Float!
  findRetenuByRetenuPersonnel(personnelid: String!, month: String!): [Retenue!]!
  findIdRetenuByRetenuPersonnel(personnelid: String!, month: String!): [String!]!
  findAllretenusalarial: [Retenue!]!
  prime(id: String!): Prime!
  findAllcategorieretenu: [CategorieRetenu!]!
  categorieRetenu(id: String!): CategorieRetenu!
  findAllpersonnel: [Personnel!]!
  pagiantionResponsePersonnel(pagination: PaginationInput!): PersonnelPaginatedResponse!
  findOnePersonnel(id: String!): Personnel!
  getpersonnelaccount(id: String!): User!
  getpersonnelbyaccount(userid: String!): Personnel!
  findCategoriepersonnelbypersonnel(personnelid: String!): String!
  findAllprimepersonnel: [PrimePersonnel!]!
  findmontantprimebypersonnel(personnelid: String!): [Float!]!
  findnamesprimebypersonnel(personnelid: String!): [String!]!
  findIdPrimeByPersonnel(personnelid: String!): [String!]!
  findsumallprimepersonnel(personnelid: String!): Float!
  primesETnomprimepersonnel(personnelid: String!): [[String!]!]!
  findPrimesByPrimesPersonnel(personnelid: String!, month: String!): [Prime!]!
  getallpersonnelprimebymont(personnelid: String!, month: String!): Float!
  allMonthAffectedPrimeToPersonnel(personnelid: String!, primeid: String!): [Prime!]!
  pagiantionResponsePrimePersonnel(pagination: PaginationInput!): PrimePersonnelPaginatedResponse!
  findAllprime: [Prime!]!
  findAllcategorieprime: [CategoriePrime!]!
  categoriePrime(id: String!): CategoriePrime!
  pagiantionResponseSalaire(pagination: PaginationInput!): SalairePaginatedResponse!
  findallsalaire: [Salaire!]!
  getonesalaire(id: String!): Salaire!
  getsalairebypersonnel(personnelid: String!): [Salaire!]!
  PersonnelMonthSalary(personnelid: String!): [String!]!
  PersonnelNetSalary(personnelid: String!): [Float!]!
  personnelsalairenetbymonth(personnelid: String!, month: String!): Float!
  findAllperiod: [Periode!]!
  periode(id: String!): Periode!
  findAllsalaire: [SalaireBase!]!
  salaireBase(id: String!): SalaireBase!
  findAllcategoriepersonnel: [CategoriePersonnel!]!
  findOneCategoriepersonnel(id: String!): CategoriePersonnel!
  findAllfraisexam: [FraisExamen!]!
  fraisExamen(id: String!): FraisExamen!
  findAll: [Inscription!]!
  findOne(id: String!): Inscription!
  findAllavanceinscription: [AvanceInscription!]!
  findOneavanceincription(id: String!): AvanceInscription!
  getcumullativesum(id: String!): Float!
  findAllfraisinscription: [FraisInscription!]!
  findOnefraisincription(id: String!): FraisInscription!
  findAllparents: [Parent!]!
  parent(id: String!): Parent!
  getStudentStatisticsAnglophone: [StudentStatistics!]!
  getStudentStatisticsFrancophone: [StudentStatistics!]!
  getTotalStudentStatisticsFrancophone: [TOTALTABLETWO!]!
  getTotalStudentStatisticsAnglophone: [TOTALTABLETWO!]!
  getTotalMaxStudentStatistics: [TOTALTABLETWO!]!
  getTrancheStatisticsForSpecialStudents: [SpecialStudentStatistics!]!
  numberOfStudentsStartedPayingAdmissionFeeSalleAnglophone(sallename: String!): Float!
  numberOfStudentsStartedPayingPension: Float!
  getSectionStatisticsAnglophoneSecondInstalment: [SectionStatistics!]!
  getSectionStatisticsFrancophoneSecondInstalment: [SectionStatistics!]!
  TotalSectionStatisticsFrancophoneSecondInstalmentFee: [TOTALTABLEONE!]!
  TotalSectionStatisticsAnglophoneSecondInstalmentFee: [TOTALTABLEONE!]!
  TotalMAX_T_ONE_SecondInstalmentFee: [TOTALTABLEONE!]!
  getSectionStatisticsAnglophoneFirstInstalment: [SectionStatistics!]!
  getSectionStatisticsFrancophoneFirstInstalment: [SectionStatistics!]!
  TotalSectionStatisticsFrancophoneFirstInstalmentFee: [TOTALTABLEONE!]!
  TotalSectionStatisticsAnglophoneFirstInstalmentFee: [TOTALTABLEONE!]!
  TotalMAX_T_ONE_FirstInstalmentFee: [TOTALTABLEONE!]!
  getSectionStatisticsAnglophoneAdmissionFee: [SectionStatistics!]!
  getSectionStatisticsFrancophoneAdmissionFee: [SectionStatistics!]!
  TotalSectionStatisticsFrancophoneAdmissionFee: [TOTALTABLEONE!]!
  TotalSectionStatisticsAnglophoneAdmissionFee: [TOTALTABLEONE!]!
  TotalMAX_T_ONE_Admission: [TOTALTABLEONE!]!
  getGeneralAnglophoneSectionStatistics: [ClassStatistics!]!
  getGeneralFrancophoneSectionStatistics: [ClassStatistics!]!
  TotalGeneralFrancophoneSectionStatistics: [TOTAL!]!
  TotalGeneralAnglophoneSectionStatistics: [TOTAL!]!
  TotalMAX_T_ZERO: [TOTAL!]!
  getTrancheStatisticsForNormalStudents: [SpecialStudentStatistics!]!
  findAllCourse: [Course!]!
  findOneCourse(id: String!): Course!
  me: Personnel!
  findAllparentstudents: [ParentStudent!]!
  findOneparentstudent(id: String!): ParentStudent!
}

input PaginationInput {
  take: Int!
  skip: Int! = 0
}

type Mutation {
  createuser(createUser: UserCreateInput!): User!
  updateuser(id: String!, input: UpdateUserInput!): User!
  deleteuser(id: String!): User!
  createPersonnelSalle(input: PersonnelSalleCreateInput!): PersonnelSalle!
  deletePersonnelSalle(id: String!): PersonnelSalle!
  createStudent(student: StudentCreateInput!): Student!
  updateStudent(id: String!, input: StudentCreateInput!): Student!
  deletestudent(id: String!): Student!
  createLocalisation(createLocalisation: LocalisationCreateInput!): Localisation!
  updatelocalisation(id: String!, input: LocalisationUpdateInput!): Localisation!
  deletelocalisation: Localisation!
  createcategorieeleve(createCategorieEleve: CategorieEleveCreateInput!): CategorieEleve!
  deletecategorieeleve(id: String!): CategorieEleve!
  updatecategorieeleve(id: String!, input: CategorieEleveUpdateInput!): CategorieEleve!
  createreductionscolarite(reductionscolarite: RedutionScolariteInput!): ReductionScolarite!
  updateprimepersonnel(id: String!, input: SalleUpdateInput!): Salle!
  deleteprimepersonnel(id: String!): PrimePersonnel!
  createTranche(tranche: TrancheCreateInput!): Tranche!
  updatetranche(id: String!): Tranche!
  deletePension(id: String!): Tranche!
  createParameter(input: ParameterCreateInput!): Parameter!
  updateParameter(id: String!): Parameter!
  deleteparamaters(id: String!): Parameter!
  createTrancheStudent(trancheStudent: TrancheStudentCreateInput!): TrancheStudent!
  updateTrancheStudent(id: String!): TrancheStudent!
  deletetranchestudent(id: String!): TrancheStudent!
  createPensionSalle(pensionsalle: PensionSalleCreateInput!): PensionSalle!
  updatePension(id: String!): Pension!
  deletepension(id: String!): Pension!
  createAnnerAccademique(anneeAccademique: AnneeAccademiqueCreateInput!): AnneeAccademique!
  updateanneeacademique(id: String!, input: AnneeAccademiqueUpdateInput!): AnneeAccademique!
  deleteanneeacademique(id: String!): AnneeAccademique!
  createSalle(salle: SalleCreateInput!): Salle!
  deleteSalle(id: String!): Salle!
  UpdateSalle(id: String!, input: SalleUpdateInput!): Salle!
  createNiveauEtude(niveauEtude: NiveauEtudeCreateInput!): NiveauEtude!
  updateNiveauEtude(id: String!, input: NiveauEtudeUpdateInput!): NiveauEtude!
  deleteNiveauEtude(id: String!): NiveauEtude!
  createSectionCycle(sectionCycle: SectionCycleCreateInput!): SectionCycle!
  updatesectioncycle(id: String!, input: SectionCycleUpdateInput!): SectionCycle!
  deletesectioncycle(id: String!): SectionCycle!
  createSection(section: SectionCreateInput!): Section!
  updatesection(id: String!, input: SectionUpdateInput!): Section!
  deletesection(id: String!): Section!
  createCycle(cycle: CycleCreateInput!): Cycle!
  updatecycle(id: String!, input: CycleUpdateInput!): Cycle!
  deletecycle(id: String!): Cycle!
  createavancetranche(avancetranche: AvanceTrancheCreateInput!): AvanceTranche!
  deleteavancetranche(id: String!): AvanceTranche!
  createPension(pension: PensionCreateInput!): Pension!
  createExpense(input: ExpenseCreateInput!): Expense!
  updateExpense(id: String!, input: ExpenseUpdateInput!): Expense!
  deleteExpense(id: String!): Expense!
  createpaysalaire(input: PaySalaryCreateInput!): PaySalary!
  updatepaysalire(id: String!, input: PaySalaryUpdateInput!): PaySalary!
  deletePaysalire(id: String!): PaySalary!
  createretnupersonnel(retenuPersonnel: RetenuPersonnelCreateInput!): RetenuPersonnel!
  updateretenupersonnel(id: String!, input: RetenuPersonnelUpdateInput!): RetenuPersonnel!
  deleteretenupersonnel(id: String!): RetenuPersonnel!
  createretenuesalarial(retenue: RetenuCreateInput!): Retenue!
  updateretenusalarial(id: String!, input: RetenuUpdateInput!): Retenue!
  deleteretenusalarial(id: String!): Retenue!
  createcategorieretenu(createCategorieRetenu: CategorieRetenuCreateInput!): CategorieRetenu!
  updatecategorieretenu(id: String!, input: CategorieRetenuUpdateInput!): CategorieRetenu!
  createpersonnel(createPersonnelUser: PersonnelCreateInput!): Personnel!
  updatepersonnel(id: String!, input: PersonnelUpdateInput!): Personnel!
  deletepersonnel(id: String!): Personnel!
  createprimepersonnel(primePersonnel: PrimePersonnelCreateInput!): PrimePersonnel!
  createprime(prime: PrimeCreateInput!): Prime!
  updateprime(id: String!, input: PrimeUpdateInput!): Prime!
  deleteprime(id: String!): Prime!
  createcategorieprime(createCategoriePrime: CategoriePrimeCreateInput!): CategoriePrime!
  updatecategorieprime(id: String!, input: CategoriePrimeUpdate!): CategoriePrime!
  deletecategorieprime(id: String!): CategoriePrime!
  createsalaire(input: SalaireCreateInput!): Salaire!
  createperiod(periode: PeriodeCreateInput!): Periode!
  updateperiod(id: String!, input: PeriodeUpdateInput!): Periode!
  deleteperiod(id: String!): Periode!
  createsalairebase(salaireBase: SalaireBaseCreateInput!): SalaireBase!
  updatesalairebase(id: String!, input: SalaireBaseUpdateInput!): SalaireBase!
  deletesalairebase(id: String!): SalaireBase!
  createcategoriepersonnnel(createCategoriePersonnel: CategoriePersonnelCreateInput!): CategoriePersonnel!
  updatecategoriepersonnel(id: String!, input: CategoriePersonnelUpdate!): CategoriePersonnel!
  deletecategoriepersonnel(id: String!): CategoriePersonnel!
  createFraisExamen(fraisExamen: FraisExamentInput!): FraisExamen!
  updatefraisexam(id: String!, input: UpdateFraisExamentInput!): FraisExamen!
  deletefraisfraisexam(id: String!): FraisExamen!
  createInscription(inscription: InscriptionInput!): Inscription!
  update(inscription: InscriptionInput!, id: String!): Inscription!
  createAvanceInscription(avanceInscription: AvanceInscriptionCreateInput!): AvanceInscription!
  updateavanceinscription(inscription: AvanceInscriptionUpdateInput!): AvanceInscription!
  createFraisInscription(fraisInscription: FraisInscriptionInput!): FraisInscription!
  deletefraisincription(id: String!): FraisInscription!
  upodatefraisinscription(id: String!, input: UpdateFraisInscriptionInput!): FraisInscription!
  createParent(parent: ParentCreateInput!): Parent!
  updateParent(id: String!): Parent!
  deleteparent(id: String!): Parent!
  createCourse(input: CourseCreateInput!): Course!
  updateCouse(id: String!, input: CourseUpdateInput!): Course!
  deleteCourse(id: String!): Course!
  login(loginInput: LoginInput!): LoginResponse!
  loginUpdate(loginInput: LoginUpdate!): User!
  createParentstudent(input: ParentStudentCreateInput!): ParentStudent!
  updateParentstudent(id: String!): ParentStudent!
  deleteparentstudent(id: String!): ParentStudent!
}

input UserCreateInput {
  ID: String
  email: String
  password: String
  firstName: String
  lastName: String
  phoneNumber: String
  role: Role
}

input UpdateUserInput {
  ID: String
  email: String
  password: String
  firstName: String
  lastName: String
  phoneNumber: String
  role: Role
}

input PersonnelSalleCreateInput {
  salleId: ID
  personnelId: ID
  courseId: ID
}

input StudentCreateInput {
  ID: String
  salleId: String
  matricule: String
  firstname: String
  lastname: String
  dateOfBirth: String
  birthPlace: String
  sex: String
  adress: String
  categoryStudentId: String
  inscription: ID
  fatherFirstName: String
  fatherLastName: String
  fatherPhoneNumber: String
  fatherProfession: String
  motherFirstName: String
  motherLastName: String
  motherPhoneNumber: String
  motherProfession: String
  tutorFirstName: String
  tutorLastName: String
  tutorPhoneNumber: String
  tutorProfession: String
  repeating: String
}

input LocalisationCreateInput {
  ID: String
  ville: String
  region: String
  pays: String
  quartier: String
  bp: String
  latitude: Float! = 0
  longitude: Float! = 0
}

input LocalisationUpdateInput {
  ID: String
  ville: String
  region: String
  pays: String
  quartier: String
  bp: String
  latitude: Float! = 0
  longitude: Float! = 0
}

input CategorieEleveCreateInput {
  ID: String
  nom: String
  description: String
  reductionScolariteId: String
}

input CategorieEleveUpdateInput {
  ID: String
  nom: String
  description: String
  reductionScolariteId: String
}

input RedutionScolariteInput {
  ID: String
  name: String
  description: String
  montant: Float = 0
  pourcentage: Float = 0
}

input SalleUpdateInput {
  ID: ID
  name: String
  montantPensionSalle: Float
  niveauEtudeId: ID
  anneeAcademiqueId: String
  effectif: Float = 0
  niveau: NiveauEtudeCreateInput
}

input NiveauEtudeCreateInput {
  ID: String
  name: String
  description: String
  cycleId: ID
  montantPension: Float
  sectionCycle: SectionCycleCreateInput
}

input SectionCycleCreateInput {
  ID: String
  description: String
  cycle: CycleCreateInput
  section: SectionCreateInput
  cycleID: ID
  sectionID: ID
}

input CycleCreateInput {
  ID: String
  name: String
  sectionId: ID
}

input SectionCreateInput {
  ID: String
  name: String
  description: String
}

input TrancheCreateInput {
  ID: String
  anneeAcademiqueId: ID
  salleId: ID
  year: String
  name: String
  description: String
  montant: Float = 0
  priority: Float = 0
  dateLine: DateTime
}

input ParameterCreateInput {
  ID: String
  parameterName: String
  phoneNumber: String
  emailAddress: String
  contry: String
  postalBox: String
  schoolCurrency: String
  year: String
  anneeAcademiqueId: String
}

input TrancheStudentCreateInput {
  studentId: ID
  trancheid: ID
  year: String
  name: String
  description: String
  montant: Float = 0
  tranche: TrancheCreateInput
}

input PensionSalleCreateInput {
  salleId: ID
  anneeAcademiqueId: ID
  name: String
  description: String
  montantPension: Float!
  dateLine: ID
}

input AnneeAccademiqueCreateInput {
  ID: String
  name: String
  description: String
}

input AnneeAccademiqueUpdateInput {
  ID: String
  name: String
  description: String
}

input SalleCreateInput {
  ID: ID
  name: String
  anneeAcademiqueId: String
  montantPensionSalle: Float
  effectif: Float = 0
  niveauEtudeId: ID
  niveau: NiveauEtudeCreateInput
}

input NiveauEtudeUpdateInput {
  ID: String
  name: String
  description: String
  cycleId: ID
  montantPension: Float
}

input SectionCycleUpdateInput {
  ID: String
  description: String
  cycle: CycleCreateInput
  section: SectionUpdateInput
  cycleID: ID
  sectionID: ID
}

input SectionUpdateInput {
  ID: String
  name: String
  description: String
}

input CycleUpdateInput {
  ID: String
  name: String
  sectionId: ID
}

input AvanceTrancheCreateInput {
  ID: String
  trancheId: ID
  studentId: ID
  year: String
  name: String
  description: String
  montant: Float
  reste: Float = 0
  tranchestudentinput: TrancheStudentCreateInput
}

input PensionCreateInput {
  studentId: ID
  anneeAcademiqueId: ID
  name: String
  year: String
  description: String
  dateLine: DateTime
}

input ExpenseCreateInput {
  academicyearId: ID
  studentId: ID
  personnelId: ID
  debit: Float
  credit: Float
  debitTotal: Float
  creditTotal: Float
}

input ExpenseUpdateInput {
  academicyearId: ID
  studentId: ID
  personnelId: ID
  debit: Float
  credit: Float
  debitTotal: Float
  creditTotal: Float
}

input PaySalaryCreateInput {
  personnelId: ID
  montant: Float! = 0
  moisPaie: String
}

input PaySalaryUpdateInput {
  personnelId: ID
  montant: Float! = 0
  moisPaie: String
}

input RetenuPersonnelCreateInput {
  retenuId: ID
  personnelId: ID
  startMonth: String
}

input RetenuPersonnelUpdateInput {
  retenuId: ID
  personnelId: ID
  startMonth: String
}

input RetenuCreateInput {
  nom: String
  description: String
  montant: Float! = 0
}

input RetenuUpdateInput {
  categorieretenuId: String
  nom: String
  description: String
  montant: Float! = 0
  categorieRetenu: CategorieRetenuUpdateInput
}

input CategorieRetenuUpdateInput {
  ID: String
  nom: String
  description: String
  type: String
}

input CategorieRetenuCreateInput {
  ID: String
  nom: String
  description: String
  type: String
}

input PersonnelCreateInput {
  id: ID!
  userID: ID
  categoryPersonnelId: ID
  firstName: String
  lastName: String
  situationMatrimonial: String
  sexe: String
  phoneNumber: String
  fonction: String
  status: String
  childNumber: Float
  dateOfBirth: String
  dateOfStartWork: String
}

input PersonnelUpdateInput {
  id: ID!
  userID: ID
  categoryPersonnelId: ID
  firstName: String
  lastName: String
  situationMatrimonial: String
  sexe: String
  phoneNumber: String
  fonction: String
  status: String
  childNumber: Float
  dateOfBirth: String
  dateOfStartWork: String
}

input PrimePersonnelCreateInput {
  primeId: ID
  personnelId: ID
  startMonth: String
}

input PrimeCreateInput {
  nom: String
  description: String
  montant: Float! = 0
}

input PrimeUpdateInput {
  nom: String
  description: String
  montant: Float! = 0
}

input CategoriePrimeCreateInput {
  ID: String
  nom: String
  description: String
}

input CategoriePrimeUpdate {
  ID: String
  nom: String
  description: String
}

input SalaireCreateInput {
  ID: String
  personnelId: ID
  primeId: ID
  retenuId: ID
  payer: Boolean! = false
  montant: Float! = 0
  jourPaie: String
  moisPaie: String
}

input PeriodeCreateInput {
  ID: String
  nom: String
  description: String
  datePeriode: DateTime
}

input PeriodeUpdateInput {
  ID: String
  nom: String
  description: String
  datePeriode: DateTime
}

input SalaireBaseCreateInput {
  categoriepersonnelId: ID
  description: String
  montant: Float! = 0
  categoriePersonnel: CategoriePersonnelCreateInput
}

input CategoriePersonnelCreateInput {
  primeID: ID
  retenuID: ID
  salaireID: ID
  nom: String
  description: String
  montant: Float
}

input SalaireBaseUpdateInput {
  categoriepersonnelId: ID
  description: String
  montant: Float! = 0
  categoriePersonnel: CategoriePersonnelUpdate
}

input CategoriePersonnelUpdate {
  primeID: ID
  retenuID: ID
  salaireID: ID
  nom: String
  description: String
  montant: Float
}

input FraisExamentInput {
  ID: String
  description: String
  montant: Float! = 0
  dateLine: DateTime!
  niveauEtude: NiveauEtudeCreateInput
  salle: SalleCreateInput!
  anneeAccademique: AnneeAccademiqueCreateInput!
}

input UpdateFraisExamentInput {
  ID: String
  description: String
  montant: Float! = 0
  dateLine: DateTime!
  salle: SalleUpdateInput!
  anneeAccademique: AnneeAccademiqueCreateInput!
}

input InscriptionInput {
  fraisincription_id: ID
  anneacademiqueId: ID
  salleId: ID
  studentId: ID
  name: String
  description: String
  montant: Float
  dateLine: String
  fraisInscription: FraisInscriptionInput
  student: StudentCreateInput
  anneeAccademique: AnneeAccademiqueCreateInput
}

input FraisInscriptionInput {
  salleId: ID
  anneeAcademiqueId: ID
  nameFraisInscription: String
  montant: Float = 0
  salle: SalleCreateInput
  anneeAccademique: AnneeAccademiqueCreateInput
}

input AvanceInscriptionCreateInput {
  inscription_id: ID
  name: String
  description: String
  montant: Float = 0
  reste: Float = 0
  inscription: InscriptionInput
}

input AvanceInscriptionUpdateInput {
  inscription_id: ID
  name: String
  description: String
  montant: Float = 0
  reste: Float = 0
  inscription: InscriptionInput
}

input UpdateFraisInscriptionInput {
  salleId: ID
  anneeAcademiqueId: ID
  nameFraisInscription: String
  montant: Float = 0
  salle: SalleCreateInput
  anneeAccademique: AnneeAccademiqueCreateInput
}

input ParentCreateInput {
  ID: String
  firstname: String
  lastname: String
  profession: String
  phonenumber: String
  parentStatus: String
  gender: String
  email: String
  childNumber: Float! = 0
}

input CourseCreateInput {
  title: String
  time: Float
}

input CourseUpdateInput {
  title: String
  time: Float
}

input LoginInput {
  username: String!
  password: String!
  connection: Boolean! = false
}

input LoginUpdate {
  email: String!
  oldpassword: String!
  newpassword: String!
}

input ParentStudentCreateInput {
  studentId: ID
  parentId: ID
}